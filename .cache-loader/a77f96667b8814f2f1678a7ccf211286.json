{"remainingRequest":"/Users/serqeycheremisin/ieltof/node_modules/babel-loader/lib/index.js!/Users/serqeycheremisin/ieltof/src/components/ChatPage/ChatWindow/index.js","dependencies":[{"path":"/Users/serqeycheremisin/ieltof/src/components/ChatPage/ChatWindow/index.js","mtime":1526134571841},{"path":"/Users/serqeycheremisin/ieltof/.babelrc","mtime":1523141114949},{"path":"/Users/serqeycheremisin/ieltof/node_modules/cache-loader/dist/cjs.js","mtime":0},{"path":"/Users/serqeycheremisin/ieltof/node_modules/babel-loader/lib/index.js","mtime":1520329890000}],"contextDependencies":[],"result":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _react = require(\"react\");\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _ChatWindow = require(\"./ChatWindow.css\");\n\nvar _ChatWindow2 = _interopRequireDefault(_ChatWindow);\n\nvar _classnames = require(\"classnames\");\n\nvar _classnames2 = _interopRequireDefault(_classnames);\n\nvar _ReceivedMessage = require(\"components/ChatPage/ChatWindow/ReceivedMessage\");\n\nvar _ReceivedMessage2 = _interopRequireDefault(_ReceivedMessage);\n\nvar _SendMessage = require(\"components/ChatPage/ChatWindow/SendMessage\");\n\nvar _SendMessage2 = _interopRequireDefault(_SendMessage);\n\nvar _UserServices = require(\"../../../services/UserServices\");\n\nvar UserServices = _interopRequireWildcard(_UserServices);\n\nvar _UserStore = require(\"../../../stores/UserStore\");\n\nvar _UserStore2 = _interopRequireDefault(_UserStore);\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar ChatWindow = function (_React$Component) {\n    _inherits(ChatWindow, _React$Component);\n\n    function ChatWindow(props) {\n        _classCallCheck(this, ChatWindow);\n\n        var _this = _possibleConstructorReturn(this, (ChatWindow.__proto__ || Object.getPrototypeOf(ChatWindow)).call(this, props));\n\n        _this.state = {\n            friend: _this.props.friend,\n            accept: _this.props.friend.accept,\n            profile: _UserStore2.default.getProfile()\n        };\n        return _this;\n    }\n\n    _createClass(ChatWindow, [{\n        key: \"componentWillMount\",\n        value: function componentWillMount() {\n            _UserStore2.default.on(\"accept_friendship\", this.onAcceptFriendship.bind(this));\n            _UserStore2.default.on(\"revieve_new_message_\" + this.props.friend.friend_id, this.onMessageRecived.bind(this));\n        }\n    }, {\n        key: \"componentWillUnmount\",\n        value: function componentWillUnmount() {\n            _UserStore2.default.removeListener(\"accept_friendship\", this.onAcceptFriendship.bind(this));\n            _UserStore2.default.removeListener(\"revieve_new_message_\" + this.props.friend.friend_id, this.onMessageRecived.bind(this));\n        }\n    }, {\n        key: \"onAcceptFriendship\",\n        value: function onAcceptFriendship() {\n            this.setState({ accept: true });\n        }\n    }, {\n        key: \"onMessageRecived\",\n        value: function onMessageRecived() {\n            this.props.friend = _UserStore2.default.getFriends().get(this.state.friend.friend_id);\n            this.setState({ friend: _UserStore2.default.getFriends().get(this.state.friend.friend_id) });\n        }\n    }, {\n        key: \"renderMessages\",\n        value: function renderMessages() {\n            var _this2 = this;\n\n            var messages = [];\n            this.state.friend = this.props.friend;\n            var propsMessages = this.state.friend.messages;\n            console.log(this.state.friend);\n\n            if (propsMessages === null) {\n                return null;\n            }\n\n            propsMessages.map(function (el, index) {\n                if (el.UserId === _this2.state.profile.Id) {\n                    messages.push(_react2.default.createElement(_SendMessage2.default, { text: el.Text }));\n                } else {\n                    messages.push(_react2.default.createElement(_ReceivedMessage2.default, { text: el.Text }));\n                }\n            });\n\n            return messages;\n        }\n    }, {\n        key: \"render\",\n        value: function render() {\n            this.componentWillMount();\n            this.componentWillUnmount();\n            this.state.friend = this.props.friend;\n            return _react2.default.createElement(\n                \"div\",\n                { className: (0, _classnames2.default)(_defineProperty({}, _ChatWindow2.default.right_inbox, true)) },\n                _react2.default.createElement(\n                    \"div\",\n                    { className: (0, _classnames2.default)(_defineProperty({}, _ChatWindow2.default.top_bar_messages, true)) },\n                    _react2.default.createElement(\n                        \"div\",\n                        {\n                            \"ng-if\": \"conversationService.selectedConversation.type === CONSTANTS.CONVERSATIONS.ONE_TO_ONE_CONVERSATION\" },\n                        _react2.default.createElement(\n                            \"a\",\n                            { \"class\": \"link-to-profile\",\n                                \"ng-click\": \"userCacheService.clearAndSetUser(conversationService.selectedConversation.user)\",\n                                \"ng-href\": \"/user/1308722\", href: \"/user/1308722\" },\n                            this.state.friend.name\n                        ),\n                        _react2.default.createElement(\n                            \"is-online-green-button\",\n                            { \"ng-if\": \"!conversationService.selectedConversation.user.isConnected\",\n                                \"class\": \"text-last-connection\",\n                                user: \"conversationService.selectedConversation.user\", style: {} },\n                            _react2.default.createElement(\"span\", { style: { fontSize: 12, color: '#9AA2A7' } })\n                        )\n                    )\n                ),\n                _react2.default.createElement(\n                    \"div\",\n                    { className: (0, _classnames2.default)(_defineProperty({}, _ChatWindow2.default.display_chat, true)) },\n                    _react2.default.createElement(\n                        \"div\",\n                        { className: (0, _classnames2.default)(_defineProperty({}, _ChatWindow2.default.user_information, true)) },\n                        _react2.default.createElement(\n                            \"div\",\n                            { style: { position: 'relative' } },\n                            _react2.default.createElement(\n                                \"div\",\n                                null,\n                                _react2.default.createElement(\n                                    \"a\",\n                                    null,\n                                    _react2.default.createElement(\"img\", { className: (0, _classnames2.default)(_defineProperty({}, _ChatWindow2.default.profile_picture_conversation, true)),\n                                        style: { width: 115 },\n                                        src: this.state.friend.url })\n                                )\n                            )\n                        )\n                    ),\n                    _react2.default.createElement(\n                        \"div\",\n                        { \"class\": \"text-center pt10\" },\n                        this.renderMessages()\n                    )\n                ),\n                _react2.default.createElement(\n                    \"div\",\n                    { className: (0, _classnames2.default)(_defineProperty({}, _ChatWindow2.default.add_message, true)) },\n                    _react2.default.createElement(\n                        \"form\",\n                        { \"class\": \"ng-pristine ng-valid ng-valid-maxlength\" },\n                        _react2.default.createElement(\n                            \"div\",\n                            { \"class\": \"input-text-chat-container\" },\n                            _react2.default.createElement(\n                                \"div\",\n                                null,\n                                _react2.default.createElement(\n                                    \"span\",\n                                    { \"ng-if\": \"!conversationService.selectedConversation.notInitialized\" },\n                                    _react2.default.createElement(\"textarea\", { ref: \"textarea\",\n                                        \"ng-if\": \"voiceNoteMenu === 0\",\n                                        \"ng-enter\": \"conversationService.postMessage(vm.message, conversationService.selectedConversation); vm.message = ''; modalReferralSendMessage()\",\n                                        \"send-event-for-chat\": \"\", \"is-writing-model\": \"vm\",\n                                        \"ng-disabled\": \"!connectionStateService.hasConnection\", id: \"textarea-messages\",\n                                        maxlength: \"1000\",\n                                        \"ng-focus\": \"scrollToBottomOfTheChatOnFocus()\", style: { height: 49 },\n                                        \"ng-model\": \"vm.message\",\n                                        \"class\": \"newmessage type-message darker-scrollbar ng-pristine ng-untouched ng-valid ng-empty ng-valid-maxlength\",\n                                        placeholder: \"Write a message\" }),\n                                    _react2.default.createElement(\"div\", { onClick: this.sendMessage.bind(this),\n                                        className: \"fa fa-paper-plane toggle btn-send\", style: {} })\n                                )\n                            )\n                        )\n                    )\n                ),\n                this.state.accept || this.state.friend.who === this.state.profile.Id ? null : _react2.default.createElement(\n                    \"div\",\n                    { \"class\": \"accept-ignore-request-box-in-messages\" },\n                    _react2.default.createElement(\n                        \"a\",\n                        { \"class\": \"btn btn-link btn-link-red mr40\", style: { color: '#ffa1a1' },\n                            onClick: this.ignoreFriendship.bind(this) },\n                        \"Ignore\"\n                    ),\n                    _react2.default.createElement(\n                        \"a\",\n                        { \"class\": \"btn btn-link\", style: { color: '#2f4053;' }, onClick: this.acceptFriendship.bind(this) },\n                        \"Accept\"\n                    )\n                )\n            );\n        }\n    }, {\n        key: \"ignoreFriendship\",\n        value: function ignoreFriendship() {\n            UserServices.ignoreFriendship(this.props.friend.dialog_id, this.props.friend.friend_id);\n        }\n    }, {\n        key: \"acceptFriendship\",\n        value: function acceptFriendship() {\n            UserServices.acceptFriendship(this.props.friend.dialog_id, this.props.friend.friend_id);\n        }\n    }, {\n        key: \"sendMessage\",\n        value: function sendMessage() {\n\n            var toId = this.state.profile.Id === this.props.friend.user_id ? this.props.friend.friend_id : this.props.friend.user_id;\n\n            var message = {\n                type: \"sendMessage\",\n                action: \"sendMessage\",\n                body: {\n                    dialog_id: this.props.friend.dialog_id,\n                    from_id: this.props.friend.user_id,\n                    to_id: this.props.friend.friend_id,\n                    text: this.refs.textarea.value\n                }\n            };\n            console.log(message);\n            _UserStore2.default.setLastDialog(this.props.friend.friend_id);\n\n            this.props.socket.send(JSON.stringify(message));\n        }\n    }]);\n\n    return ChatWindow;\n}(_react2.default.Component);\n\nexports.default = ChatWindow;",{"version":3,"sources":["src/components/ChatPage/ChatWindow/index.js"],"names":["UserServices","ChatWindow","props","state","friend","accept","profile","getProfile","on","onAcceptFriendship","bind","friend_id","onMessageRecived","removeListener","setState","getFriends","get","messages","propsMessages","console","log","map","el","index","UserId","Id","push","Text","componentWillMount","componentWillUnmount","right_inbox","top_bar_messages","name","fontSize","color","display_chat","user_information","position","profile_picture_conversation","width","url","renderMessages","add_message","height","sendMessage","who","ignoreFriendship","acceptFriendship","dialog_id","toId","user_id","message","type","action","body","from_id","to_id","text","refs","textarea","value","setLastDialog","socket","send","JSON","stringify","Component"],"mappings":"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","file":"index.js","sourceRoot":"/Users/serqeycheremisin/ieltof","sourcesContent":["import React, {Component} from \"react\";\nimport styles from \"./ChatWindow.css\";\nimport classNames from \"classnames\";\nimport ReceivedMessage from \"components/ChatPage/ChatWindow/ReceivedMessage\";\nimport SendMessage from \"components/ChatPage/ChatWindow/SendMessage\";\nimport * as UserServices from \"../../../services/UserServices\";\nimport UserStore from \"../../../stores/UserStore\";\n\nexport default class ChatWindow extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            friend: this.props.friend,\n            accept: this.props.friend.accept,\n            profile: UserStore.getProfile()\n        };\n    }\n\n    componentWillMount() {\n        UserStore.on(\"accept_friendship\", this.onAcceptFriendship.bind(this));\n        UserStore.on(\"revieve_new_message_\" + this.props.friend.friend_id, this.onMessageRecived.bind(this));\n    }\n\n    componentWillUnmount() {\n        UserStore.removeListener(\"accept_friendship\", this.onAcceptFriendship.bind(this));\n        UserStore.removeListener(\"revieve_new_message_\" + this.props.friend.friend_id, this.onMessageRecived.bind(this));\n\n    }\n\n    onAcceptFriendship() {\n        this.setState({accept: true})\n    }\n\n    onMessageRecived() {\n        this.props.friend = UserStore.getFriends().get(this.state.friend.friend_id);\n        this.setState({friend: UserStore.getFriends().get(this.state.friend.friend_id)});\n    }\n\n    renderMessages() {\n        let messages = [];\n        this.state.friend = this.props.friend;\n        let propsMessages = this.state.friend.messages;\n        console.log(this.state.friend);\n\n        if (propsMessages === null) {\n            return null;\n        }\n\n        propsMessages.map((el, index) => {\n            if (el.UserId === this.state.profile.Id) {\n                messages.push(<SendMessage text={el.Text}/>)\n            } else {\n                messages.push(<ReceivedMessage text={el.Text}/>)\n            }\n        });\n\n        return messages;\n    }\n\n    render() {\n        this.componentWillMount();\n        this.componentWillUnmount();\n        this.state.friend = this.props.friend;\n        return (\n            <div className={classNames({[styles.right_inbox]: true})}>\n                <div className={classNames({[styles.top_bar_messages]: true})}>\n                    <div\n                        ng-if=\"conversationService.selectedConversation.type === CONSTANTS.CONVERSATIONS.ONE_TO_ONE_CONVERSATION\">\n                        <a class=\"link-to-profile\"\n                           ng-click=\"userCacheService.clearAndSetUser(conversationService.selectedConversation.user)\"\n                           ng-href=\"/user/1308722\" href=\"/user/1308722\">\n                            {this.state.friend.name}\n                        </a>\n                        <is-online-green-button ng-if=\"!conversationService.selectedConversation.user.isConnected\"\n                                                class=\"text-last-connection\"\n                                                user=\"conversationService.selectedConversation.user\" style={{}}>\n                            <span style={{fontSize: 12, color: '#9AA2A7'}}>\n                            </span>\n                        </is-online-green-button>\n                    </div>\n                </div>\n                <div className={classNames({[styles.display_chat]: true})}>\n                    <div className={classNames({[styles.user_information]: true})}>\n                        <div style={{position: 'relative'}}>\n                            <div>\n                                <a>\n                                    <img className={classNames({[styles.profile_picture_conversation]: true})}\n                                         style={{width: 115}}\n                                         src={this.state.friend.url}/>\n                                </a>\n                            </div>\n                        </div>\n                    </div>\n                    <div class=\"text-center pt10\">\n                        {this.renderMessages()}\n                    </div>\n                </div>\n\n\n                <div className={classNames({[styles.add_message]: true})}>\n                    <form class=\"ng-pristine ng-valid ng-valid-maxlength\">\n                        <div class=\"input-text-chat-container\">\n                            <div>\n                               <span ng-if=\"!conversationService.selectedConversation.notInitialized\">\n                                   <textarea ref=\"textarea\"\n                                             ng-if=\"voiceNoteMenu === 0\"\n                                             ng-enter=\"conversationService.postMessage(vm.message, conversationService.selectedConversation); vm.message = ''; modalReferralSendMessage()\"\n                                             send-event-for-chat=\"\" is-writing-model=\"vm\"\n                                             ng-disabled=\"!connectionStateService.hasConnection\" id=\"textarea-messages\"\n                                             maxlength=\"1000\"\n                                             ng-focus=\"scrollToBottomOfTheChatOnFocus()\" style={{height: 49}}\n                                             ng-model=\"vm.message\"\n                                             class=\"newmessage type-message darker-scrollbar ng-pristine ng-untouched ng-valid ng-empty ng-valid-maxlength\"\n                                             placeholder=\"Write a message\">\n\n                                   </textarea>\n                                   <div onClick={this.sendMessage.bind(this)}\n                                        className=\"fa fa-paper-plane toggle btn-send\" style={{}}></div>\n                                   {/*<div  class=\"fa fa-microphone toggle btn-voice-note\"></div>*/}\n                               </span>\n                            </div>\n                        </div>\n                    </form>\n                </div>\n\n\n                {this.state.accept || this.state.friend.who === this.state.profile.Id ? null :\n                    <div class=\"accept-ignore-request-box-in-messages\">\n                        <a class=\"btn btn-link btn-link-red mr40\" style={{color: '#ffa1a1'}}\n                           onClick={this.ignoreFriendship.bind(this)}>\n                            Ignore\n                        </a>\n                        <a class=\"btn btn-link\" style={{color: '#2f4053;'}} onClick={this.acceptFriendship.bind(this)}>\n                            Accept\n                        </a>\n                    </div>}\n            </div>\n        )\n    }\n\n    ignoreFriendship() {\n        UserServices.ignoreFriendship(this.props.friend.dialog_id, this.props.friend.friend_id);\n    }\n\n    acceptFriendship() {\n        UserServices.acceptFriendship(this.props.friend.dialog_id, this.props.friend.friend_id);\n    }\n\n    sendMessage() {\n\n        let toId = this.state.profile.Id === this.props.friend.user_id ? this.props.friend.friend_id : this.props.friend.user_id\n\n        let message = {\n            type: \"sendMessage\",\n            action: \"sendMessage\",\n            body: {\n                dialog_id: this.props.friend.dialog_id,\n                from_id: this.props.friend.user_id,\n                to_id: this.props.friend.friend_id,\n                text: this.refs.textarea.value\n            }\n        };\n        console.log(message);\n        UserStore.setLastDialog(this.props.friend.friend_id);\n\n        this.props.socket.send(JSON.stringify(message));\n    }\n\n}\n"]}]}